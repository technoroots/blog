[{"categories":["information Technology","Automation","CI-CD","Deployment"],"contents":"What Is The Concept of CI/CD ? This is probably the most common term in the devops world, CI/CD stands for Continous Integration and Continous Delivery.\nLets discuss how developement used to happen before CI/CD came in to picture. Earlier a base working code was developed with some of the functionalities that were good to go with.Now different teams (backend,frontend ect.) used to download the code from the repository and started working with their own portion, once they all are done with their own parts , integration of code will happen. In the integartion area is where the real problem occurs because of the reason that teams dont communicate with each other, there was lack of transparency, the developement team had an idea of what logic to use , what methods need to be exposed but no one tested these before so ultimately problemsused to occur at the time of integration and it really used to take hell long to get the project completed.\nThe relief to the above situation was CI/CD.\nHere developers commit their code in to the repository often on a daily basis.Each Commit has some improvements or additonal code. Each commit triggers an automated workflow on a CI server(Jenkins) that can notify developers of any failure or success of the integration.This way the code is deployed in small increments, tested and ultimately put to production and that was far more productive.\nContinous Delivery is a discipline where software is developed in such a manner that allows to deploy in production anytime. Please note that it doesnot mean that code has to be deployed but its just that it makes it feasible for the deployment to happen in production if required.\nThis gives us a possibility of continously getting feedback regarding code deployment, code quality and it gives us a way to trigger deployment in production if everything is fine in dev environment.\nJenkins Installation Jenkins is a free and open source automation server. It helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery.\nTo install jenkins we will use 2 CentOS 7 machines(64 bits)\n192.168.1.11\tnode1\t# Jenkins Master 192.168.1.12\tnode2 # Jenkins Slave\n On Jenkins master (node1), login with root and follow the below steps  [root@node1 ~]# pwd /root [root@node1 ~]# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --2020-06-08 11:36:21-- https://pkg.jenkins.io/redhat-stable/jenkins.repo Resolving pkg.jenkins.io (pkg.jenkins.io)... 151.101.154.133, 2a04:4e42:24::645 Connecting to pkg.jenkins.io (pkg.jenkins.io)|151.101.154.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 85 Saving to: ‘/etc/yum.repos.d/jenkins.repo’ 100%[===============================================================================================================\u0026gt;] 85 --.-K/s in 0s 2020-06-08 11:36:21 (5.75 MB/s) - ‘/etc/yum.repos.d/jenkins.repo’ saved [85/85] [root@node1 ~]# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key [root@node1 ~]# yum install jenkins -y  Note that jenkins user will be created with a nologin shell, execute below command to change the shell of jenkins user to /bin/bash so that jenkins is able to take the console.  [root@node1 ~]# chsh -s /bin/bash jenkins Changing shell for jenkins. chsh: Shell changed.  Give suod access to jenkins user. For this append the below line to /etc/sudoers file.   jenkins ALL=(ALL) NOPASSWD: ALL  Reset password for jenkins user  [root@node1 ~]# passwd jenkins Changing password for user jenkins. New password: BAD PASSWORD: The password is a palindrome Retype new password: passwd: all authentication tokens updated successfully.  Install java  yum install java-1.8.0-openjdk.x86_64 -y  Now login with jenkins user and start jenkins service.  [root@node1 ~]# su - jenkins Last login: Mon Jun 8 11:49:43 IST 2020 on pts/1 -bash-4.2$ sudo systemctl start jenkins \u0026amp;\u0026amp; sudo systemctl enable jenkins \u0026amp;\u0026amp; sudo systemctl status jenkins jenkins.service is not a native service, redirecting to /sbin/chkconfig. Executing /sbin/chkconfig jenkins on ● jenkins.service - LSB: Jenkins Automation Server Loaded: loaded (/etc/rc.d/init.d/jenkins; bad; vendor preset: disabled) Active: active (running) since Mon 2020-06-08 11:53:07 IST; 178ms ago Docs: man:systemd-sysv-generator(8) CGroup: /system.slice/jenkins.service └─25205 /etc/alternatives/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jen... Jun 08 11:53:06 node1.example.com systemd[1]: Starting LSB: Jenkins Automation Server... Jun 08 11:53:06 node1.example.com runuser[25180]: pam_unix(runuser:session): session opened for user jenkins by (uid=0) Jun 08 11:53:07 node1.example.com runuser[25180]: pam_unix(runuser:session): session closed for user jenkins Jun 08 11:53:07 node1.example.com systemd[1]: Started LSB: Jenkins Automation Server. Jun 08 11:53:07 node1.example.com jenkins[25175]: Starting Jenkins [ OK ]  Access the jenkins console on http://node1:8080 and follow the instructions, use the default one time password to login.   Install Suggested Plugins   Now we will create our first admin user as shown below  Our First Jenkins Job We can offcourse do a lot of things with jenkins , but just to start the show we will create a freestyle project and install apache on the server and runa small webpage.\n Click on create new jobs   Give a name to the job and select \u0026ldquo;FreeStyle project\u0026rdquo;   Now moving forward , give a description, select source code management as None Under \u0026ldquo;Build Step\u0026rdquo; select \u0026ldquo;Execute shell\u0026rdquo;  Under \u0026ldquo;Execute Shell\u0026rdquo; , write this small bash script.\n#!/usr/bin/bash sudo echo \u0026quot;This is a webpage deployed by Jenkins\u0026quot; \u0026gt;\u0026gt; /tmp/index.html sudo yum install httpd -y sudo cp /tmp/index.html /var/www/html/ sudo systemctl start httpd sudo systemctl enable httpd sudo systemctl status httpd curl localhost  Save and Apply, after that click on build now on the left hand side of the page.The build wil run and console output will look like below.  Lets put a fullstop to this article here. In the next part, we will study some jenkins basic terminologies and we will add a jenkins slave machine so as to distribute the workload.\n","permalink":"https://technoroots.github.io/blog/blog/post-6/","tags":["Jenkins","Jenkins Installation","Jenkins Job Example","Jenkins Freestyle Project"],"title":"Getting Started With Jenkins(Part-1)"},{"categories":["information Technology","Automation","Continous Integration","Continous Deployment"],"contents":"Jenkins: Important terms and concepts   Job : A Jenkins job is any task that a jenkins server can execute.Note that job is an old term now which has been replaced by new term which is called a Project . One common type of project is a Freestyle project which is really simple to execute and helps in running simple shell scripts and windows batch jobs.\n  Jenkins Pipeline : This type of project used to be called a Workflow . This is an imporatnt type of project type that helps us doing mutiple executions in steps,let us define dependencies, and sequence in which different stages of a pipeline should execute.\n  Jenkins Build : A build is a result of single execution of a project.\n  Build Trigger : A criteria for starting a new pipeline run or a build.\n  Artifacts and Repositories : This refers to the immutable files that are generated as a result of pipeline or a build excution. A single build can have multiple artifacts associated with it , these can be jar files, war files, configuration files etc.\n  Repositories : The artifacts produced might be required in future so these are kept in a repository which is most of the time a source code management tool such as git or github.\n  Configure Jenkins Slave Server In case we have to setup jenkins in a big environment, having really large number of servers, we will have to distribute the load of jenkins master server and configure jenkins slave server.\nWe are going to do the same now. We have to now login to the other machine (node2) and do the following things so that it behaves as a jenkins slave.\n Create a user jenkins and provide root level sudo access.  [root@node2 ~]# useradd jenkins Creating mailbox file: File exists [root@node2 ~]# passwd jenkins Changing password for user jenkins. New password: BAD PASSWORD: The password is a palindrome Retype new password: passwd: all authentication tokens updated successfully. visudo jenkins ALL=(ALL) NOPASSWD: ALL  Install java  yum install java-1.8.0-openjdk   Note that its not required to install jenkins on a jenkins slave server.\n  Last but not the least, we will have to setup passwordless ssh between jenkins master and jenkins slave server.On the jenkins master, execute the below commands.\n  [root@node1 ~]# su - jenkins Last login: Mon Jun 8 11:52:01 IST 2020 on pts/1 -bash-4.2$ whoami jenkins -bash-4.2$ ssh-keygen # Now keep on pressing enter key to select default values ssh-copy-id 192.168.1.12  Login to the jenkins console and follow the below steps.   Go to the the jenkins home page and click on Manage Jenkins on the left hand side Click on Manage Nodes And Clouds and then the below screen will appear.  Click on New Node on the left hand side and give a name to it.  Now fill in the details as shown in the below image.  Next we will store the credentials for jenkins user and mention the password in it . There are a number of ways to achieve the same, we can give ssh keys as well.  Give the credentials created in the last step.  Just wait for a minute and our jenkins slave should be working as shown below.  Oh yeah !! Hope you are enjoying this series of tutorials. Lets move forward and learn about pipelines in jenkins and related concepts.\n","permalink":"https://technoroots.github.io/blog/blog/post-7/","tags":["Jenkins","Jenkins slave configuration","Jenkins Artifact","Jenkins Basic Concepts"],"title":"Getting Started With Jenkins(Part-2)"},{"categories":["information Technology","Automation","Continous Integration","Continous Deployment"],"contents":"What is a Jenkins Pipeline ? According to the official documentation on jenkins.io\nJenkins Pipeline (or simply \u0026ldquo;Pipeline\u0026rdquo; with a capital \u0026ldquo;P\u0026rdquo;) is a suite of plugins which supports implementing and integrating continuous delivery pipelines into Jenkins.\nA continuous delivery (CD) pipeline is an automated expression of your process for getting software from version control rightthrough to your users and customers. Every change to your software (committed in source control) goes through a complex process on its way to being released. This process involves building the software in a reliable and repeatable manner, as well as progressing the built software (called a \u0026ldquo;build\u0026rdquo;) through multiple stages of testing and deployment.\nPipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines \u0026ldquo;as code\u0026rdquo; via the Pipeline domain-specific language (DSL) syntax.\nThe definition of a Jenkins Pipeline is written into a text file (called a Jenkinsfile) which in turn can be committed to a project’s source control repository. [2] This is the foundation of \u0026ldquo;Pipeline-as-code\u0026rdquo;; treating the CD pipeline a part of the application to be versioned and reviewed like any other code.\nPipeline Concepts Pipeline\nA Pipeline is a user-defined model of a CD pipeline. A Pipeline’s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it.Also, a pipeline block is a key part of DeclarativePipeline syntax.\nNode\nA node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline. Also, a node block is a key part of Scripted Pipeline syntax.\nStage\nA stage block defines a conceptually distinct subset of tasks performed through the entire Pipeline (e.g. \u0026ldquo;Build\u0026rdquo;, \u0026ldquo;Test\u0026rdquo; and \u0026ldquo;Deploy\u0026rdquo; stages), which is used by many plugins to visualize or present Jenkins Pipeline status/progress.e.g.\n Build The Code Test The Code Deploy to Dev Environment Deploy to Prod Environment  Stages are made up of steps that are dicussed below.\nStep\nA single task. Fundamentally, a step tells Jenkins what to do at a particular point in time (or \u0026ldquo;step\u0026rdquo; in the process). For example, to execute the shell command make use the sh step: sh \u0026lsquo;make\u0026rsquo;. When a plugin extends the Pipeline DSL, that typically means the plugin has implemented a new step.\nAn Jenkinsfile is used to write code for the pipeline.It looks like below\npipeline { agent any stages { stage('Build') { steps { echo 'Running build automation' sh './gradlew build --no-daemon' archiveArtifacts artifacts: 'dist/trainSchedule.zip' } } } NodeJs App Deployment With Jenkins Pipeline Now we are going to implement deployment of a nodejs app with the help of jenkins pipeline. For this we also need to have a git hub account so that we can keep the appcode and configure interaction between jenkins and github so that jenkins is able to fetch the code from repository and execute the pipeline.\nCode can be cloned from the below commands\nyum intall git -y git clone https://github.com/technoroots/devops-labs.git git add -A git commit -m \u0026quot;Sample code added\u0026quot; git push -u origin master  Now we are going to login to our github account and create a personal access token   Login to your github account and click on the avatar on the top right hand corner Click on settings and then click on Developer Settings Now click on Personal Access Tokens and create one ( for demo purpose we can give full access to the token but this should definitely be controlled when working in production environment) Remember to copy the token for sure as it will not be accessible again. If lost we need to create a new one.   Create a new jenkins project of type pipeline as shown below  Name it as MyTrainApp and select the project type to be MultiBranchPipeline . Steps are shown below.\n1.\tOpen jenkins homepage and click on New Item\n2.\tGive the name as MyTrainApp and select the project as Multibranch Pipeline\n3.\tGive the display name and project repository path.Select Branch Sources as git from the dropdown menu and not github.\n4. Add the git hub credentials which will consist of the personal Acceess token that we created in the start of the article.\n5. Select the credential that we created\n6.\tAs soon as we click OK , jenkins will fetch the code from the github repository and will start scanning it.\n7.\tOur pipeline will start executing and its progress can be seen as below\nAlright fellas , hope you enjoyed this series of tutorial on jenkins. Happy learning :)\n","permalink":"https://technoroots.github.io/blog/blog/post-8/","tags":["Jenkins","Jenkins Pipeline"],"title":"Getting Started With Jenkins(Part-3)"},{"categories":["information Technology"],"contents":"Introduction To Ansible Ansible is one of the important orchestration tool that forms an integral part of Devops lifecycle.As its a vast subject , we are going to cover it in four parts. Lets begin with the first part.\nAnsible is an open-source software provisioning, configuration management, and application-deployment tool. It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration.\nAnsible was written by Michael DeHaan and acquired by Red Hat in 2015. Ansible is agentless, temporarily connecting remotely via SSH or remote PowerShellto do its tasks.\n Ansible code is written in YAML. YAML is a markup language used for formatting data. It consists of simple key value pairs, lists and dictionaries Files open with 3 hyphens in the first line and close with three periods in the end List items are designated by a single hyphen and a space Each list item should have the same indentation Dictionaries are designated with a colon and a space followed by indented key-value pairs.  Ansible Installation In our lab setup we have 3 centos 7 machines running on Oracle VirtualBox 192.168.1.11 node1.example.com node1 192.168.1.12 node2.example.com node2 192.168.1.13 node3.example.com node3\nNow we are going to install ansible on node1. Execute below command to do the same\nyum install wget -y wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm ## Install the epel reppository rpm -ivh epel-release-latest-7.noarch.rpm yum install ansible -y That’s it, its as simple as that. We are good to go now.\nCore Components Of Ansible Inventories\n Inventories are how ansible can locate and run against multiple systems. We can think of an inventory as a list of hosts. By default, ansible uses /etc/ansible/hosts as its inventory, the path is configurable though and we will see later how it can be modified. Inventories can be formatted as INI format or yaml format.   We will not go with the default hosts file of ansible and rather we will create our own. We will create a directory “ansible” on the path /root/ and inside this directory we will create our own ansible hosts file as shown below.  [root@node1 ansible]# pwd /root/ansible [root@node1 ansible]# ll total 4 -rw-r--r-- 1 root root 61 Aug 10 18:34 ansible-inventory.ini [root@node1 ansible]# cat ansible-inventory.ini [appservers] node1 [webservers] node2 [dbservers] node3 Here this file consists of different servers on which the commands will be executed. We can group servers together and execute commands on them groupwise,Here we have 3 groups appservers,webservers and dbservers having 1 server each. All servers should have passwordless ssh between them. Let’s start with executing a really simple command, lets ping the server in “appservers” group.\n[root@node1 ansible]# ansible -I ansible-inventory.ini appservers -m ping node1 | SUCCESS =\u0026gt; { “ansible_facts”: { “discovered_interpreter_python”: “/usr/bin/python” }, “changed”: false, “ping”: “pong” } Modules\n Modules are essentially tools for particular task Modules can take parameters. They return JSON which can be further read and utilized if needed. We have large number of modules available to do number of tasks. Also, custom modules can be designed.  Variables\n Variables prevent hard coding the values. Variable name should always start with a letter’ Can be scoped to a group, host or a playbook. Variables can also be directories.  Facts\n Facts provide certain information about the given target hosts. Facts are discovered automatically by Ansible when it reaches out to the host. Facts gathering may be disabled as it can be a performance hit sometimes when we are working on large number of hosts. Below used setup module will display all the facts about system.  ansible -i ansible-inventory.ini appservers -m setup Plays And Playbooks\n The goal of a play is to map a group of hosts to some well defined roles A play may use one or more modules to achieve the desired end state of a group of hosts. A playbook is a series of plays. Playbooks are useful when we are working on a larger set of hosts and we need to do multiple things on different group of hosts e,g. Install and run httpd on web servers , install mysql on DB servers etc.  Configuration Files\n Ansible is a software and so has configuration files. Configuration files can be at a number of places. Below is the list of locations where config file is looked for  Run Adhoc Ansible Commands   Adhoc commands in Ansible are one liner that will do simple tasks for us.\n  Playbooks on the other hand are series of commands that we give in a .yml file.\n  Adhoc commands are useful when we need to perform quick tasks e.g. collecting log files and having a look at them, or to check if a particular service is running or not, or to check if a software is installed or not, or may be the disk usage on a particular server and so on.\nA simple example of Adhoc command is as below\n  ansible -i ansible-inventory.ini appservers -m yum -a \u0026quot;name=httpd state=latest\u0026quot; -f 100 Lets discuss the flags as below\n -i : This is used to override the default inventory file and give a different hosts file. -b : can be used to run a command with a different user, by default it will run the command with the user with which ansible is running. -m : To specify the module -a : To pass arguments. Note that this can be used without -m to execute a shell command on the servers. e.g.: -a “touch /tmp/newfile” -f : This is used to specify the value for parallelism, 100 here means that ansible will run this command on 100 hosts at once. ( This is irrelevant for us as we are working with only 3 hosts.  Adhoc Command Examples  yum module  Used to install packages (rpms). In the below example elinks rpm will be installed.\nansible -i ansible-inventory.ini appservers -m yum -a \u0026quot;name=elinks state=latest\u0026quot; Now let us try to uninstall the elinks rpm.We need to just set the state to “absent”\nansible -i ansible-inventory.ini appservers -m yum -a \u0026quot;name=elinks state=absent\u0026quot;  file module  This module is useful for managing/creating files. Lets create a new file in /opt using file module.\nansible -i ansible-inventory.ini appservers -b -m file -a \u0026quot;path=/opt/newfile state=touch\u0026quot; Below are some more examples of ways to using file module\nTo Know The Properties Of A File\n[root@node1 ansible]# ansible -i ansible-inventory.ini appservers -b -m file -a \u0026quot;path=/opt/newfile\u0026quot; node1 | SUCCESS =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;discovered_interpreter_python\u0026quot;: \u0026quot;/usr/bin/python\u0026quot; }, \u0026quot;changed\u0026quot;: false, \u0026quot;gid\u0026quot;: 0, \u0026quot;group\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;0644\u0026quot;, \u0026quot;owner\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/opt/newfile\u0026quot;, \u0026quot;size\u0026quot;: 0, \u0026quot;state\u0026quot;: \u0026quot;file\u0026quot;, \u0026quot;uid\u0026quot;: 0 } To Change The File Permissions\n[root@node1 ansible]# ansible -i ansible-inventory.ini appservers -b -m file -a \u0026quot;path=/opt/newfile mode=0400\u0026quot; node1 | CHANGED =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;discovered_interpreter_python\u0026quot;: \u0026quot;/usr/bin/python\u0026quot; }, \u0026quot;changed\u0026quot;: true, \u0026quot;gid\u0026quot;: 0, \u0026quot;group\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;0400\u0026quot;, \u0026quot;owner\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/opt/newfile\u0026quot;, \u0026quot;size\u0026quot;: 0, \u0026quot;state\u0026quot;: \u0026quot;file\u0026quot;, \u0026quot;uid\u0026quot;: 0 } To change the user owner of the file\n[root@node1 ansible]# ansible -i ansible-inventory.ini appservers -b -m file -a \u0026quot;path=/opt/newfile owner=piyush\u0026quot; node1 | CHANGED =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;discovered_interpreter_python\u0026quot;: \u0026quot;/usr/bin/python\u0026quot; }, \u0026quot;changed\u0026quot;: true, \u0026quot;gid\u0026quot;: 0, \u0026quot;group\u0026quot;: \u0026quot;root\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;0400\u0026quot;, \u0026quot;owner\u0026quot;: \u0026quot;piyush\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/opt/newfile\u0026quot;, \u0026quot;size\u0026quot;: 0, \u0026quot;state\u0026quot;: \u0026quot;file\u0026quot;, \u0026quot;uid\u0026quot;: 1000 } To Change The Group Owner Of The File\n[root@node1 ansible]# ansible -i ansible-inventory.ini appservers -b -m file -a \u0026quot;path=/opt/newfile group=piyush\u0026quot; node1 | CHANGED =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;discovered_interpreter_python\u0026quot;: \u0026quot;/usr/bin/python\u0026quot; }, \u0026quot;changed\u0026quot;: true, \u0026quot;gid\u0026quot;: 1000, \u0026quot;group\u0026quot;: \u0026quot;piyush\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;0400\u0026quot;, \u0026quot;owner\u0026quot;: \u0026quot;piyush\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/opt/newfile\u0026quot;, \u0026quot;size\u0026quot;: 0, \u0026quot;state\u0026quot;: \u0026quot;file\u0026quot;, \u0026quot;uid\u0026quot;: 1000 }  user module  We will now use user module to create and to change properties of user. Here we will add additional user “sam” to the appservers group of hosts and assign additional groups to him.\nansible -i ansible-inventory.ini appservers -b -m user -a \u0026quot;name=sam\u0026quot; ansible -i ansible-inventory.ini appservers -b -m user -a \u0026quot;name=sam append=yes groups=wheel\u0026quot; # user sam added to additional group called wheel We hope that you are able to set up your basics right from here.Lets move to second part and learn about some more ansible stuff.\n","permalink":"https://technoroots.github.io/blog/blog/post-2/","tags":["Ansible","Infra Orchestration"],"title":"Getting Started With Ansible(Part-1)"},{"categories":["information Technology"],"contents":"Ansible Inventory Management  An inventory is a list of hosts that Ansible manages Inventory location may be specified as follows a)\tDefault:/etc/ansible/hosts b)\tSpecified by CLI using -i flag c)\tCan be set in ansible.cfg An inventory files may contain hosts, patterns, groups or variables An inventory may be static or dynamic. Static inventory is a yaml or INI file Dynamic inventory is a an executable (bash script or python script). This script is given by the server vendor eg aws, azure etc depending upon our environment.  Variables and Inventory Ansible recommends not to keep variables in the inventory file but to keep them in the area of inventory file i.e. in the same directory where inventory file is kept. Separate directories for host and group related variables would be\n group_vars host_vars  Here we passed the variable in the ansible command and got the desired output.\nCreate Ansible Plays and Playbooks  Playbooks are yaml files, set of instructions that can do tasks for us. Below is an example of a yaml playbook that will install and configure httpd on the group of servers called appservers  [root@node1 playbooks]# cat apache_install.yml --- - hosts: appservers become: yes tasks: - name: install apache yum: name: httpd state: latest - name: Start and enable httpd service: name: httpd state: started enabled: yes - name: Create index.html file: path: /var/www/html/index.html state: touch - name: Add a line to index.html lineinfile: path: /var/www/html/index.html line: \u0026quot;Hello World\u0026quot; To execute a playbook we will use the below command\n [root@node1 playbooks]# pwd /root/ansible/playbooks [root@node1 playbooks]# ll total 4 -rw-r--r-- 1 root root 471 Aug 12 01:26 apache_install.yml [root@node1 playbooks]# ansible-playbook -i ../ansible-inventory.ini demo.yml ansible-playbook -i ../ansible-inventory.ini apache_install.yml–limit node1 Here we have used –limit flag to limit the execution only to a single host ( This may be useful when we want to check if the playbook is working fine.)\nUse Of Variables (Get Results Of Command Being Executed)  We can do so with the use of ‘’register keyword” Here we will see how to get all the output and specific output as well  Below is the example playbook\n[root@node1 playbooks]# cat register_demo.yml --- - hosts: all tasks: - name: Create file file: path: /tmp/newfile state: touch register: output - debug: msg= \u0026quot;debug info is {{ output }}\u0026quot; - name: Edit the file lineinfile: path: /tmp/newfile line: \u0026quot;{{ output.uid}}\u0026quot;’ Use Condition To Control Play Execution   There are possible ways in ansible to execute different parts of playbook depending upon the conditions. We can do this with the help of ‘’ handlers,notify and listen’’keywords.\n  Below is the example for such a scenario. Here apache service will be restarted only if a change in file is made. If no change is there then the service will not be started.\n  --- - hosts: all become: yes handlers: - name: restart apache service: name=\u0026quot;httpd\u0026quot; state=\u0026quot;restarted\u0026quot; listen: \u0026quot;restart web\u0026quot; tasks: - name: Create new document root directory file: path: /opt/www state: directory - name: change config replace: path: /etc/httpd/conf/httpd.conf regexp: '^DocumentRoot.*$' replace: 'DocumentRoot \u0026quot;/opt/www\u0026quot;' backup: yes notify: \u0026quot;restart web\u0026quot; Loops And Conditions In Ansible Playbooks  Loops can be implemented with “with_items” keyword. Below is an example of a playbook to create 3 new users on the hosts.  [root@node1 playbooks]# cat create_users_with_items_demo.yml --- - hosts: all become: yes tasks: - name: Create users user: name: \u0026quot;{{item}}\u0026quot; with_items: - sam - john - sarah  Run the playbook  ansible-playbook -i ../ansible-inventory.ini create_users_with_items_demo.yml  On verifying we will find that the usesr have been created.   [root@node1 playbooks]# id sarah uid=1003(sarah) gid=1003(sarah) groups=1003(sarah) [root@node1 playbooks]# id john uid=1002(john) gid=1002(john) groups=1002(john) [root@node1 playbooks]# id sam uid=1001(sam) gid=1001(sam) groups=1001(sam),10(wheel) Conditional Execution With \u0026ldquo;when\u0026rdquo; Keyword Here we will modify index.html file of a specific host depending upon its name and we will use the “when” keyword.\n[root@node1 playbooks]# cat when_keyword_demo.yml --- - hosts: all become: yes tasks: - name: edit index lineinfile: path: /var/www/html/index.html line: \u0026quot;I am modifying the web content\u0026quot; when: - ansible_hostname == \u0026quot;node1\u0026quot; [root@node1 playbooks]# curl node1 Hello World I am modifying the web content Error Handling In Ansible  Error handling in Ansible is important because ansible playbook stops the execution as soon as it comes across an error message. But there can be scenarios where the message is just a general warning and we want to ignore it so that the playbook will move forward. For this we need error handling. To demonstrate the same we will stop httpd on node2 and node3 and node1 will be the only node that will have httpd running.  [root@node1 playbooks]# cat ignore_errors_demo.yml --- - hosts: all become: yes tasks : - name: Get files get_url: url: \u0026quot;http://{{item}}/index.html\u0026quot; dest: \u0026quot;/tmp/{{item}}\u0026quot; ignore_errors: yes with_items: - node1 - node2 - node3 Httpd is running only on node1 so it will have a successful result, other two hosts which has httpd stopped will throw error but ansible will ignore it and move ahead.\nError Handling(Block Groups)  This is the other way to handle error, what is to be checked is written in a block. If the block is erroneous, then the rescue block is activated and we are displayed a debug message. If the block is passed, then the rescue block is not invoked. Note that “always” section gets executes whether the playbook pass or fails.Below is an example of Block groups . Httpd is running only on node1 and is stopped on other hosts.  [root@node1 playbooks]# cat error_handling_block_groups.yml --- - hosts: all tasks: - name: Get File block: - get_url: url: \u0026quot;http://node1/index.html\u0026quot; dest: \u0026quot;/tmp/index_file\u0026quot; rescue: - debug: msg=\u0026quot;The file does not exist\u0026quot; always: - debug: msg=\u0026quot;Play done!\u0026quot; __/tmp/index_html should not exists already__  Selective Execution Based On Tags  Tags are helpful in including or excluding certain part of code from executing or not executing. Let’s see an example for this  --- - hosts: all tasks: - name: Install Apache and ntp yum: name: \u0026quot;{{ item }}\u0026quot; state: present with_items: - httpd - ntp tags: - http - name: Work on Configuration Tag yum: name: \u0026quot;{{ item }}\u0026quot; state: present with_items: - telnet - postfix tags: - telnet  Try executing scripts with different tags  ansible-playbook -i ../ansible-inventory.ini tag_based_execution.yml --tags http Hope you are enjoying the series of tutorials, Lets move on to the third part and read more about ansible.\n","permalink":"https://technoroots.github.io/blog/blog/post-3/","tags":["Ansible","Infra Orchestration","Ansible Playbooks","Ansible Inventory"],"title":"Getting Started With Ansible(Part-2)"},{"categories":["information Technology"],"contents":"Let us move forward and read about templating in Ansible.\nCreate And Use Templates To Create Customised Configuration Files(Jinja Templates)  Templates give the ability to provide a skeletal file that can be dynamically completed using variables. The most common template use case is configuration file management. Templates are generally used by providing a template file on the ansible control node and then using the template module within your playbook to deploy the file on a target server or group. Templates are processed using jinja2 template language. Templates have an extension of .j2  Demo Login to the controller node and go to the directory where we have created the playbooks\n/root/ansible/playbooks\n[root@node1 playbooks]# cat sample.j2 {{ variable1 }} No effects on this line {{ variable2 }} [root@node1 playbooks]# cat templatedemoplaybook.yml --- - hosts: all vars: variable1: 'Hello...!!!' variable2: 'My first playbook using template' tasks: - name: Basic Template Example template: src: sample.j2 dest: /root/ansible/playbooks/output.txt Ansible Variables And Facts Variable names should be letters, numbers, and underscores. Variables should always start with a letter. We have already used ansible variables in the earlier part of the lecture, lets discuss other type of variables called dictionary variables.Ansible have some already pre-defined variables which are called magic variables .\nAn example of dictionary variable is below\nemployee: name:bob id:42\nTo reference the value there are two types of notations that can be used employee[‘name’] employee.name\n[root@node1 playbooks]# cat var_demo.yml --- - hosts: all vars: inv_file: /home/piyush/inv.txt tasks: - name: Create a file file: path: \u0026quot;{{ inv_file }}\u0026quot; state: touch - name: generate inventory lineinfile: path: \u0026quot;{{ inv_file }}\u0026quot; line: \u0026quot;{{ groups['allservers']|join(': ')}}\u0026quot; [root@node1 playbooks]# cd /home/piyush/ [root@node1 piyush]# pwd /home/piyush [root@node1 piyush]# cat inv.txt node1: node2: node3 Variable Files  We can create a variable file and pass it in the command line wih -e flag  ansible-playbook -i ../ansible-inventory.ini users.list.yml -e \u0026quot;@users.list\u0026quot; [root@node1 playbooks]# cat users.list developers: - john - sarah - tom - bob admins: - Kevin - Mary testers: - Jeff - Lee [root@node1 playbooks]# cat users.list.yml --- - hosts: appservers vars: userfile: /root/ansible/playbooks/newusers.list tasks: - name: Create file file: state: touch path: \u0026quot;{{ userfile}}\u0026quot; - name: List Users lineinfile: path: \u0026quot;{{ userfile}}\u0026quot; line: \u0026quot;{{ item}}\u0026quot; with_items: - \u0026quot;{{ developers}}\u0026quot; - \u0026quot;{{ admins}}\u0026quot; - \u0026quot;{{ testers}}\u0026quot; [root@node1 playbooks]# ansible-playbook -i ../ansible-inventory.ini users.list.yml -e \u0026quot;@users.list\u0026quot; PLAY [appservers] ******************************************************************************************************************************************* TASK [Gathering Facts] ************************************************************************************************************************************** ok: [node1] TASK [Create file] ****************************************************************************************************************************************** changed: [node1] TASK [List Users] ******************************************************************************************************************************************* changed: [node1] =\u0026gt; (item=john) changed: [node1] =\u0026gt; (item=sarah) changed: [node1] =\u0026gt; (item=tom) changed: [node1] =\u0026gt; (item=bob) changed: [node1] =\u0026gt; (item=Kevin) changed: [node1] =\u0026gt; (item=Mary) changed: [node1] =\u0026gt; (item=Jeff) changed: [node1] =\u0026gt; (item=Lee) PLAY RECAP ************************************************************************************************************************************************** node1 : ok=3 changed=2 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 [root@node1 playbooks]# cat newusers.list john sarah tom bob Kevin Mary Jeff Lee Ansible Facts  We can add filters while collecting facts as shown below  [root@node1 playbooks]# ansible localhost -m setup -a \u0026quot;filter=*dist*\u0026quot; localhost | SUCCESS =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;ansible_distribution\u0026quot;: \u0026quot;CentOS\u0026quot;, \u0026quot;ansible_distribution_file_parsed\u0026quot;: true, \u0026quot;ansible_distribution_file_path\u0026quot;: \u0026quot;/etc/redhat-release\u0026quot;, \u0026quot;ansible_distribution_file_variety\u0026quot;: \u0026quot;RedHat\u0026quot;, \u0026quot;ansible_distribution_major_version\u0026quot;: \u0026quot;7\u0026quot;, \u0026quot;ansible_distribution_release\u0026quot;: \u0026quot;Core\u0026quot;, \u0026quot;ansible_distribution_version\u0026quot;: \u0026quot;7.6\u0026quot; }, \u0026quot;changed\u0026quot;: false }  To suit our requirements, we can create custom facts as well. Below is an example for the same.  Custom facts are also called Local facts\nWe can create our own custom facts as well. For this login to the node for which you want to create custom facts and create a file on the below path. We will login to node3\nmkdir -p /etc/ansible/facts.d/ vi data.fact [location] type=physical datacenter: Bengaluru Now login to the controller node i.e. node1 [root@node1 ansible]# ansible -i ansible-inventory.ini dbservers -m setup -a \u0026quot;filter=ansible_local\u0026quot; node3 | SUCCESS =\u0026gt; { \u0026quot;ansible_facts\u0026quot;: { \u0026quot;ansible_local\u0026quot;: { \u0026quot;data\u0026quot;: { \u0026quot;location\u0026quot;: { \u0026quot;datacenter\u0026quot;: \u0026quot;Bengaluru\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;physical\u0026quot; } } }, \u0026quot;discovered_interpreter_python\u0026quot;: \u0026quot;/usr/bin/python\u0026quot; }, \u0026quot;changed\u0026quot;: false } Ansible Roles Roles are ways of automatically loading certain vars_files, tasks, and handlers based on a known file structure. Grouping content by roles also allows easy sharing of roles with other users.\nRoles expect files to be in certain directory names. Roles must include at least one of these directories, however it is perfectly fine to exclude any which are not being used. When in use, each directory must contain a main.yml file, which contains the relevant content:\n tasks - contains the main list of tasks to be executed by the role. handlers - contains handlers, which may be used by this role or even anywhere outside this role. defaults - default variables for the role (see Using Variables for more information). vars - other variables for the role (see Using Variables for more information). files - contains files which can be deployed via this role. templates - contains templates which can be deployed via this role. meta - defines some meta data for this role. Default path for roles is /etc/ansible/roles  Download Roles From Ansible Galaxy Creating roles on our own can sometimes be cumbersome.Ansible is an opensource project and techies from all around the globe write roles and publish it over ansible galaxy so that others can use it.\nAnsible galaxy is repository of community created ansible roles that can be used by others who want to utilize them. To know more , please visit : : https://galaxy.ansible.com/\n[root@node1 galaxy]# pwd /root/ansible/galaxy [root@node1 galaxy]# ansible-galaxy init mysql - mysql was created successfully [root@node1 galaxy]# cd mysql/ [root@node1 mysql]# ll total 4 drwxr-xr-x 2 root root 22 Aug 26 18:32 defaults drwxr-xr-x 2 root root 6 Aug 26 18:32 files drwxr-xr-x 2 root root 22 Aug 26 18:32 handlers drwxr-xr-x 2 root root 22 Aug 26 18:32 meta -rw-r--r-- 1 root root 1328 Aug 26 18:32 README.md drwxr-xr-x 2 root root 22 Aug 26 18:32 tasks drwxr-xr-x 2 root root 6 Aug 26 18:32 templates drwxr-xr-x 2 root root 39 Aug 26 18:32 tests drwxr-xr-x 2 root root 22 Aug 26 18:32 vars [root@node1 mysql] ansible-galaxy search elastic | more ![image](../../images/post/ansible-16.png) Now go to the path where playbooks are located( the ones that we have created) and create a small playbook to call the role that we have installed . To set the default path where galaxy will install the role , comment out relevant line in /etc/ansible/ansible.cfg [root@node1 playbooks]# ansible-galaxy install elastic.elasticsearch [root@node1 playbooks]# pwd /root/ansible/playbooks [root@node1 playbooks]# cat install_elastic_role.yml\n name: Call Elasticsearch role hosts: all roles:  role: elastic.elasticsearch    To remove the role ansible-galaxy remove elastic.elasticsearch That is it for the current tutorial.We will learn more about Ansible in the next part of this series. ","permalink":"https://technoroots.github.io/blog/blog/post-4/","tags":["Ansible","Infra Orchestration","Ansible Roles","Ansible Galaxy","Jinja Templates"],"title":"Getting Started With Ansible(Part-3)"},{"categories":["information Technology","Automation","Orchestration Tool"],"contents":"Let us move forward and read about Parallelism in Ansible and Ansible Vault\nParallelism In Ansible  Ansible supports parallelism that is it works on number of hosts at once in parallel rather than working one at a time. If the ansible control node is a server with good configuration, we can increase the number of parallel processes and this number can be managed by ansible.cfg file. By default, each process can be forked 5 times We can specify a different value with -f flag.   Ansible will only fork to the maximum equal to the number of hosts that are present in the inventory, no matter how large fork value we specify. We can mention the fork value in playbooks by the serial key word in the hosts section serial: 10 max_fail_perceentage: 30 # In the parallel execution if 30% of the execution fails, then whole batch is considered fail.  Ansible Vault : Dealing With Confidential Data This is a ansible way to secure files containing confidential data.In case we have some confidential information in a file , we can encrypt it using ansible vault and then decrypt it.\n[root@node1 playbooks]# echo \u0026quot;This is a secret file\u0026quot; \u0026gt;\u0026gt; secret.txt [root@node1 playbooks]# ansible-vault encrypt secret.txt New Vault password: Confirm New Vault password: Encryption successful [root@node1 playbooks]# cat secret.txt $ANSIBLE_VAULT;1.1;AES256 35386236356661303433353862333161376436373935323563646634633266616537393335656134 3930653763313963653233393231613834346433383737310a376231663536396131313531386465 32613166626630363161376664633036376432623231393535383537316237383564353962366266 6633393839393761330a323962313461623336326263663165313033333130613063316634346263 63303335653830333861383135353639393537653933333861616563303863353132 [root@node1 playbooks]# ansible-vault edit secret.txt Vault password: [root@node1 playbooks]# ansible-vault view secret.txt Vault password: This is a secret file [root@node1 playbooks]# ansible-vault decrypt secret.txt Vault password: Decryption successful We hope this series of tutorials will help you do your daily opearational tasks at work. For more information, refer the official Ansible documentation.\n\u0026lt; docs.ansible.com \u0026gt;\n","permalink":"https://technoroots.github.io/blog/blog/post-5/","tags":["Ansible","Infra Orchestration","Ansible Roles","Ansible Galaxy","Jinja Templates"],"title":"Getting Started With Ansible(Part-4)"},{"categories":["Cloud Computing"],"contents":"Basic Cloud Concepts What is cloud computing ? Cloud computing is the on demand availability of computer system resources, especially data storage and computing power, without direct active management by the user. The term is generally used to describe data centres available to many users over the Internet.\nAdvantages Of Cloud Computing  Cost saving Security Flexibility Mobiliy Disaster Recovery Automatic software updates Large number of services available for use.  Networking Concepts For Cloud Computing Linux Namespaces A namespace is a way of scoping a particular set of identifiers. Using a namespace, you can use the same identifier multiple times in different namespaces. You can also restrict an identifier set visible to particular processes. At a high level, Linux namespace allow for isolation of global system resources between independent processes. For example, the PID namespace isolates the process ID numberspace. This means that two processes running on the same host can have the same PID.\nNetwork Namespaces In a network namespace, the scoped identifiers are network devices; so a given network device, such as eth0, exists in a particular namespace. Linux starts up with a default network namespace, so if your operating system does not do anything special, that is where all the network devices will be located. However, it is also possibleto create further non-default namespaces, and create new devices in those namespaces, or to move an existing device from one namespace to another.\nOverlay Networks Overlay network is a network spread over another network. For example, any application that has or provides services and is in a client server architecture is an overlay network over the internet.\nStorage Concepts For Cloud Computing Storage Virtualization In computer science, storage virtualization is the process of presenting a logical view of the physical storage resources to a host computer system,treating all storage media (hard disk, optical disk, tape, etc.) in the enterprise as a single pool of storage.\nStorage Types  SAN : Storage area Network ( Fibre optics) DAS : Direct attached storage ( Physical hard drive) NAS : Network attached storage ( NFS)  Cloud Computing Deployment Models Public Cloud: The public cloud is defined as computing services offered by third-party providers over the public Internet, making them available to anyone who wants to use or purchase them. They may be free or sold on-demand, allowing customers to pay only per usage for the CPU cycles, storage, or bandwidth they consume.\nPrivate Cloud: A private cloud is a particular model of cloud computing that involves a distinct and secure cloud based environment in which only the specified client can operate.\nHybrid Cloud: Is a cloud-computing environment that uses a mix of on-premises,private cloud and third party, public cloud services with orchestration between the two platforms\nCommunity Cloud: A community cloud in computing is a collaborative effort in which infrastructure is shared between several organizations from a specific community with common concerns (security, compliance, jurisdiction, etc.), whether managed internally or by a third party and hosted internally or externally. This is controlled and used by a group of organizations that have shared interest. The costs are spread over fewer users than a public cloud (but more than a private cloud), so only some of the cost savings potential of cloud computing are realized.\nCloud Computing Service Delivery Model IAAS (Infrastructure as a service) : IaaS is the lowest-level cloud service paradigm and arguably the most important. With IaaS, pre-configured hardware resources are provided to users through a virtual interface. Unlike PaaS and SaaS, IaaS doesn’t include applications or even an operating system (implementing all of that is left up to the customer), it simply enables access to the infrastructure needed to power or support that software. IaaS can provide extra storage for corporate data backups, network bandwidth for a company website server, or it can even enable access to high power computing which was previously only accessible to those with supercomputers. Popular IaaS offerings like Amazon EC2.\nPAAS (Platform as a service) : a cloud service model where the cloud is used to deliver a platform to users from which they can develop, initialize and manage applications. PaaS offerings typically include a base operating system and a suite of applications and development tools. PaaS eliminates the need for organizations to build and maintain the infrastructure traditionally used to develop applications.\nSAAS (Software as a service ): Sometimes referred to as ‘on-demand software’, SaaS is a software licensing and delivery model where a fully functional and complete software product is delivered to users over the web on a subscription basis. SaaS offerings are typically accessed by end users through a web browser (making the user’s operating system largely irrelevant) and can be billed based on consumption or, more simply, with a flat monthly charge. Example ServiceNow.\n","permalink":"https://technoroots.github.io/blog/blog/post-1/","tags":["Cloud Computing Basics","Virtualization","ITInfra"],"title":"Introduction to Cloud Computing"},{"categories":["Go Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://technoroots.github.io/blog/blog/post-10/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":["Go Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://technoroots.github.io/blog/blog/post-11/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":["Programming Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://technoroots.github.io/blog/blog/post-12/","tags":["Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":["Go Language"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://technoroots.github.io/blog/blog/post-13/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"},{"categories":["Python"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://technoroots.github.io/blog/blog/post-9/","tags":["Photos","Game","HTML","Python","New"],"title":"How To Use Checklists To Improve Your UX"}]